---
title: "01_download"
format: html
editor: visual
---

This script works with the OLADE website.

```{r}
library(tidyverse)
library(reticulate)

# Setup chunk for Quarto / R Markdown
knitr::opts_knit$set(root.dir = "C:/Users/aathens/OneDrive - United Nations/Documentos/CEPALSTAT Data Process/cepalstat-data-upload")

# Force use of known working path
use_python("C:/Users/aathens/AppData/Local/anaconda3/python.exe", required = TRUE)

# Double check config
py_config()
```


## Set up Playwright session
```{python}
from playwright.sync_api import sync_playwright
p = sync_playwright().start()
browser = p.chromium.launch(headless=False)
context = browser.new_context(accept_downloads=True)
page = context.new_page()
```

## Navigate to OLADE website for data download
```{python}
page.goto("https://sielac.olade.org/WebForms/Reportes/ReporteOD.aspx?subsectorId=0&or=720&ss=2&v=1")
```

## Interact with dropdowns / filters
Select Files > Actividad
```{python}
# Click the "Filas" dropdown (the custom input)
page.click("#cbFila_I")

# Wait for dropdown to open (brief pause)
page.wait_for_timeout(500)

# Type "Actividad" (or the exact label in Spanish)
page.fill("#cbFila_I", "Actividad")

# Wait for the selection to register
page.wait_for_timeout(500)

# Press Enter to confirm selection
page.keyboard.press("Enter")
```

```{python}
# Columnas: Select "Unidad de Información"
page.click("#cbColumna_I")
page.wait_for_timeout(500)
page.fill("#cbColumna_I", "Unidad de Información")
page.wait_for_timeout(500)
page.keyboard.press("Enter")

# Unidad de medida: Select "TEP"
page.click("#cbUnidad_I")
page.wait_for_timeout(500)
page.fill("#cbUnidad_I", "tep")
page.wait_for_timeout(500)
page.keyboard.press("Enter")

# Wait for the export button to be enabled and clickable
#page.wait_for_selector("input[value='Exportar Excel']:not([disabled])", timeout=60000)
#print("Page has finished loading and Export to Excel is now enabled.")
```
Stopping here and returning on Monday. Still searching for a reliable way to determine when OLADE is done loading the data/buffering after these three steps.
NEXT STEPS: before going any further on refining filters, test that playwright works with downloading the excel file properly. (this has been a sticking point for RSelenium/Macs in the past...)

## Download Excel file

```{python}
with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
    page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
download = download_info.value # Retrieves download object
download.save_as("Pilot/Data/Raw/olade_data.xlsx") # Saves downloaded file with new name
#print("Download complete.")
```

## Close browser

```{python}
browser.close()
p.stop()
```


## Load data in R