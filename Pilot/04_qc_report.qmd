---
title: "Quality Check Report: `r params$indicator_name`"
format: 
  html:
    toc: true
    toc_float: true
    code_folding: show
    theme: cosmo
    math: "mathjax"
params:
  indicator_id: 1754
  indicator_name: "Indicator Name"
  data_source: "Data Source"
  comp_data_path: "Data/Checks/comp_id1754.csv"
execute:
  echo: false
  warning: false
  message: false
---

<!--
This report summarizes the quality checks performed to validate updated internal data for environmental indicators.
It compares internal data with the publicly available CEPALSTAT dataset to assess completeness, consistency, and statistical plausibility.
Non-technical readers are encouraged to read the section summaries for guidance on how to interpret results.
-->

```{r setup}
library(tidyverse)
library(magrittr)
library(readxl)
library(glue)
library(knitr)
library(gt)
library(reactable)
library(plotly)
library(scales)
library(lubridate)
library(DT)
library(scales)

# Load data
indicator_id <- params$indicator_id
comp <- read_csv(params$comp_data_path)
countries <- read_csv("../Data/iso_codes.csv")

# Metadata
date_stamp <- Sys.Date()
indicator_name <- params$indicator_name
data_source <- params$data_source

# Create summary info
summary_info <- list(
  "Report Date" = format(date_stamp, "%d %B %Y"),
  "Indicator ID" = indicator_id,
  "Indicator Name" = indicator_name,
  "Data Source" = data_source,
  "Time Coverage" = paste(min(comp$dim_29117_label), "-", max(comp$dim_29117_label)),
  "Number of Countries" = n_distinct(comp$dim_208_label),
  "Total Records" = nrow(comp)
)
```

## Summary Info

This section summarizes key metadata about the indicator and dataset under review.
It helps contextualize the scope of the data quality checks.

```{r}
# Create summary table
summary_df <- tibble(
  Metric = names(summary_info),
  Value = unlist(summary_info)
)

summary_df %>%
  gt() %>%
  tab_header(
    title = "QC Report Information",
    subtitle = glue("Generated on {format(date_stamp, '%d %B %Y')}")
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "#f7f7f7"),
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels()
  )
```

## Completeness Check

### Data Completeness by Country and Year

*This section verifies whether the internal dataset covers the same country-year combinations as the public CEPALSTAT version.* 
It flags:

- "Missing in Both" (no data in either source)

- "Old Only" (data was removed or lost in the new version)

- "New Only" (new values added that were not in the original public version)

- "Present in Both" (overlap between datasets)

The visual below shows data coverage by country and year. Gaps or additions should be reviewed for justification.


```{r}
all_combinations <- expand_grid(
  country = countries$name[which(countries$ECLAC == "Y")],
  year = min(comp$dim_29117_label):max(comp$dim_29117_label)
)

coverage_check <- all_combinations %>%
  left_join(comp, by = c("country" = "dim_208_label", "year" = "dim_29117_label")) %>% 
  mutate(status = ifelse(is.na(status), "Missing in Both", status))

# Remove sub-regions if not in data set
regional_status <- coverage_check$status[which(coverage_check$country %in% c("Latin America", "Caribbean", "South America", "Central America"))]

if(all(regional_status == "Missing in Both")) {
  coverage_check %<>%
    filter(!country %in% c("Latin America", "Caribbean", "South America", "Central America"))
}

```

```{r}
p <- coverage_check %>% 
  mutate(
    country = factor(country, levels = sort(unique(country), decreasing = TRUE)),
    status = factor(status, 
                   levels = c("Present in Both", "New Only", "Old Only", "Missing in Both"),
                   labels = c("Present in Both", "New Only", "Old Only", "Missing in Both"))
  ) %>% 
  ggplot(aes(x = year, y = country, fill = status,
             text = paste("Country:", country, 
                         "<br>Year:", year, 
                         "<br>Status:", status))) +
  geom_tile(color = "white") +
  scale_fill_manual(values = c(
    "Missing in Both" = "white",
    "Old Only" = "#ff9999",
    "New Only" = "#99ccff",
    "Present in Both" = "#e6e6e6"
  )) +
  labs(
    title = "Data Availability by Country and Year",
    subtitle = "Shows data availability in both internal and public datasets",
    x = NULL, 
    y = NULL, 
    fill = "Data Coverage"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(face = "bold")
  )

ggplotly(p, tooltip = "text") %>%
  layout(
    legend = list(orientation = "h", y = -0.2)
  )
```


**Add check for missing records when there are additional dimensions**

Insert line plots with old data in black and new data points in blue?

## Value Comparisons (Between Data Sets)

*This section analyzes changes between values that are available in both the public and internal data sets.*
Key statistics include mean and absolute differences, and the share of values with changes greater than ±20%.
Red dots in the plots identify values that exceed this threshold.

This helps identify outliers, input errors, or significant data revisions that may need explanation.

### Summary Statistics

```{r}
summary_info <- comp %>%
  filter(status == "Present in Both") %>%
  summarise(
    "Mean % difference" = round(mean(perc_diff, na.rm = TRUE), 1),
    "% of values with large differences (<20%)" = round(mean(flag_large_diff, na.rm = TRUE) * 100, 1),
    "Mean absolute difference" = round(mean(abs_diff, na.rm = TRUE), 1),
    "Median reported value" = round(median(value_data, na.rm = TRUE), 1),
    "Minimum reported value" = round(min(value_data, na.rm = TRUE), 1),
    "Maximum reported value" = round(max(value_data, na.rm = TRUE), 1)
  )

# Convert to long format
summary_df <- tibble(
  Metric = names(summary_info),
  Value = unlist(summary_info)
)

# Format with % where applicable
summary_df <- summary_df %>%
  mutate(
    Value = case_when(
      grepl("%", Metric) ~ percent(as.numeric(Value) / 100, accuracy = 0.1),
      TRUE ~ as.character(Value)
    )
  )

# Render with gt
summary_df %>%
  gt() %>%
  tab_header(
    title = "Change Detection Summary",
    subtitle = "Key metrics comparing values present in both internal and public datasets"
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "#f7f7f7"),
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels()
  )
```


### Absolute Value Comparison

This section compares data values for country/year pairs between the public and internal data sets. The dashed line indicates perfect alignment between the two sources. Any points colored in red indicate a greater than 20% difference between the two data sets.

```{r}
p <- comp %>% 
  filter(flag_some_na == FALSE) %>% # remove partial entries
  mutate(flag_large_diff = factor(flag_large_diff, 
                             levels = c(FALSE, TRUE),
                             labels = c("Within ±20%", "Above ±20%"))) %>% 
  ggplot(aes(
  y = value_pub,
  x = value_data,
  color = flag_large_diff,
  text = paste(
    "Record ID:", record_id,
    "<br>Country:", dim_208_label,
    "<br>Year:", dim_29117_label,
    "<br>Public:", round(value_pub, 1),
    "<br>Internal:", round(value_data, 1),
    "<br>Above Threshold:", flag_large_diff
  )
)) +
  geom_point(alpha = 0.8, size = 1.4) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray60") +
  scale_color_manual(
    values = c("Within ±20%" = "#99ccff", "Above ±20%" = "#cc6666"),
    guide = "none"
  ) +
  labs(
    y = "Public Data",
    x = "Internal Data",
    title = "Value Comparison between Public and Internal Data",
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 12),
    legend.position = "bottom",
    legend.title = element_text(face = "bold")
  )

# Convert to interactive plot with tooltips
ggplotly(p, tooltip = "text")
```

### Relative Difference Comparison

This section compares relative differences between the public and internal data. A percent change is calculated between the public data and internal data, and the data is displayed in country/year pairs. The ±20% tolerance threshold band is colored a light green. Large relative changes above the 20% changes are colored red.

```{r}
year_min <- min(as.numeric(comp$dim_29117_label), na.rm = TRUE)
year_max <- max(as.numeric(comp$dim_29117_label), na.rm = TRUE)

p <- comp %>% 
  filter(flag_some_na == FALSE) %>% 
  ggplot(aes(
    x = as.numeric(dim_29117_label),
    y = perc_diff,
    text = paste(
      "Record ID:", record_id,
      "<br>Country:", dim_208_label,
      "<br>Year:", dim_29117_label,
      "<br>% Diff:", round(perc_diff, 1)
    )
  )) +
  # Fix: Band fill outside aes()
  geom_rect(xmin = year_min, xmax = year_max, ymin = -20, ymax = 20,
            fill = "#e6f4ea", alpha = 0.6, inherit.aes = FALSE) +

  geom_jitter(aes(color = abs(perc_diff) > 20), 
              width = 0.2, height = 0, size = 1.4, alpha = 0.8) +

  scale_color_manual(values = c("FALSE" = "#99ccff", "TRUE" = "#cc6666"), guide = "none") +

  labs(
    title = "Percent Change between Public and Internal Data",
    subtitle = "Red points are outside of the ±20% tolerance threshold",
    x = "Year",
    y = "Percent Difference"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 12),
    legend.position = "none"
  )

ggplotly(p, tooltip = "text") %>%
  layout(
    title = list(
      text = paste0(
        "Percent Change between Public and Internal Data",
        '<br><sup>Red points are outside of the ±20% tolerance threshold</sup>'
      )
    )
  )


```



### Above Threshold Table

This table displays records where the updated internal values differ from the public CEPALSTAT data by more than 20%, corresponding to the red points in the plots above.

Rows with a z-score (`z_perc_diff`) greater than 3 are statistically significant outliers, indicating values that deviate strongly from the overall distribution and may require further review or explanation.

```{r}
reactable(
  comp %>%
    mutate(
      z_perc_diff = as.numeric(scale(perc_diff)),  # force numeric vector
      value_data = round(value_data, 1),
      value_pub = round(value_pub, 1),
      perc_diff = round(perc_diff, 1),
      z_perc_diff = round(z_perc_diff, 1)
    ) %>%
    filter(flag_large_diff == TRUE) %>%
    arrange(desc(z_perc_diff)) %>%
    select(
      record_id,
      dim_208_label,
      dim_29117_label,
      value_data,
      value_pub,
      perc_diff,
      z_perc_diff
    ),
  defaultPageSize = 5,
  searchable = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    style = list(fontFamily = "Segoe UI, Roboto, Helvetica, sans-serif", fontSize = "14px")
  )
)

```

## Outlier Detection (Within Internal Data Set)

*This section evaluates the quality of the internal data independently by providing statistical outlier detection based on z-scores.* It flags any records where the percent difference is more than 3 standard deviations from the mean, which could indicate outliers or extreme changes in the data.

A z-score measures how far a value is from the average, in terms of standard deviations. It’s calculated as: 

<div style="text-align:center">

**z = (x − μ) / σ**

</div>

where: x is the value of interest, μ is the mean of the group, and σ is the standard deviation.

Typical interpretations:

- A z-score of 0 means the value is at the mean

- A z-score of ±1 is within the typical range (68% of data is within 1 s.d.)

- A z-score of ±2 is unusual (95% of data is within 2 s.d.)

- A z-score of ±3 or more is considered an outlier (99.7% of data is within 3 s.d.)


### Global Quality Checks

Calculate global z-score, highlight any other structural issues (implausible values?)

<!--
Future additions:
- Could create checks to highlight any other potential structural issues such as implausible or negative values, or duplicates, or NAs
-->

```{r}

```




### Country-Level Quality Checks

Calculate country-level z scores

<!--
Future additions:
- Could create checks to highlight any sharp year-over-year changes by looking at % change from lag(year)
- Could create checks for any flat values with 0 standard deviation over time
-->


```{r}
comp %>%
  filter(flag_some_na == FALSE) %>%
  group_by(dim_208_label) %>%  # per country
  mutate(
    z_value = scale(value_data),
    outlier_value = abs(z_value) > 2
  ) %>%
  ungroup() %>%
  filter(outlier_value == TRUE) %>%
  select(record_id, dim_208_label, dim_29117_label, value_data, z_value) %>%
  arrange(desc(abs(z_value)))


comp %>%
  filter(flag_some_na == FALSE) %>%
  group_by(dim_208_label) %>%  # per country
  mutate(
    z_value = scale(value_pub),
    outlier_value = abs(z_value) > 2
  ) %>%
  ungroup() %>%
  filter(outlier_value == TRUE) %>%
  select(record_id, dim_208_label, dim_29117_label, value_pub, z_value) %>%
  arrange(desc(abs(z_value)))

```


```{r}
## Run z-score tests

# Calculate z score based on percent difference between current and public
tests <- comp %>% 
  filter(flag_some_na == FALSE) %>% 
  mutate(z_perc = scale(perc_diff),
         outlier_perc = ifelse(abs(z_perc) > 3, TRUE, FALSE))

# Table of flagged outliers
comp %>% 
  filter(flag_some_na == FALSE) %>% 
  mutate(z_perc = round(scale(perc_diff), 1),
         outlier_perc = ifelse(abs(z_perc) > 3, TRUE, FALSE),
         value_data = round(value_data, 1), value_pub = round(value_pub, 1)) %>%
  filter(outlier_perc == TRUE) %>%
  select(record_id, dim_208_label, dim_29117_label, value_data, value_pub, perc_diff, z_perc) %>%
  arrange(desc(abs(z_perc))) %>%
  reactable(
    defaultPageSize = 10,
    bordered = TRUE,
    highlight = TRUE,
    theme = reactableTheme(
      style = list(fontFamily = "Segoe UI, Roboto, Helvetica, sans-serif", fontSize = "14px")
    )
  )
```


#### Country-level analysis

(To be refined further with more examples.)

Country time series:

```{r}
p <- ggplot(comp, aes(
  x = as.numeric(dim_29117_label),
  y = value_data,
  group = dim_208_label,
  color = dim_208_label,  # for visual separation
  text = paste("Country:", dim_208_label,
               "<br>Year:", dim_29117_label,
               "<br>Value:", round(value_data, 2))
)) +
  geom_line(alpha = 0.7) +
  scale_color_viridis_d(option = "D") +
  labs(
    title = "Country Time Series – Internal Data",
    x = "Year", y = "Value"
  ) +
  theme_minimal() +
  theme(legend.position = "none")  # hide legend

# Convert to interactive plot
ggplotly(p, tooltip = "text")
```

```{r}
library(ggplot2)
library(plotly)

# Base ggplot
p <- ggplot(comp, aes(
  x = as.numeric(dim_29117_label),  # Year
  y = value_data,
  group = dim_208_label,            # Country
  color = flag_new_entry,
  text = paste(
    "Country:", dim_208_label,
    "<br>Year:", dim_29117_label,
    "<br>Value:", round(value_data, 1),
    "<br>New entry:", flag_new_entry
  )
)) +
  geom_line(aes(group = dim_208_label), alpha = 0.5, color = "gray50") +
  geom_point(size = 1, alpha = 0.7) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
  labs(
    title = "Time Series by Country",
    subtitle = "Red points indicate new entries not present in public dataset",
    x = "Year",
    y = "Value"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Convert to interactive plot
ggplotly(p, tooltip = "text")

```


```{r}
library(ggplot2)
library(plotly)

p2 <- ggplot(comp, aes(
  x = as.numeric(dim_29117_label),  # Year
  y = value_data,
  group = dim_208_label,            # Country
  color = flag_large_diff,
  text = paste(
    "Country:", dim_208_label,
    "<br>Year:", dim_29117_label,
    "<br>Value:", round(value_data, 1),
    "<br>% Difference:", round(perc_diff, 1),
    "<br>Above Threshold:", flag_large_diff
  )
)) +
  geom_line(aes(group = dim_208_label), alpha = 0.5, color = "gray50") +
  geom_point(size = 2, alpha = 0.9) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
  labs(
    title = "Time Series by Country",
    subtitle = "Red points indicate values with >20% difference from public data",
    x = "Year",
    y = "Internal Value"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

ggplotly(p2, tooltip = "text")

```


```{r}
library(dplyr)
library(ggplot2)
library(plotly)

# Step 1: Identify countries with at least one large difference
countries_with_flags <- comp %>%
  filter(flag_large_diff == TRUE) %>%
  distinct(dim_208_label) %>%
  pull()

# Step 2: Filter full dataset to only include those countries
comp_flagged <- comp %>%
  filter(dim_208_label %in% countries_with_flags)

# Step 3: Create the plot
p3 <- ggplot(comp_flagged, aes(
  x = as.numeric(dim_29117_label),  # Year
  y = value_data,
  group = dim_208_label,
  color = flag_large_diff,
  text = paste(
    "Country:", dim_208_label,
    "<br>Year:", dim_29117_label,
    "<br>Value:", round(value_data, 1),
    "<br>% Difference:", round(perc_diff, 1),
    "<br>Above Threshold:", flag_large_diff
  )
)) +
  geom_line(aes(group = dim_208_label), alpha = 0.5, color = "gray50") +
  geom_point(size = 2, alpha = 0.9) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
  labs(
    title = "Countries with at Least One Large Difference",
    subtitle = "Only countries with at least one value >20% difference are shown",
    x = "Year",
    y = "Internal Value"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

ggplotly(p3, tooltip = "text")

```



## Appendix

### Data Dictionary

```{r}
# Create data dictionary
data_dict <- tibble(
  Field = names(comp),
  Description = c(
    "Unique record identifier",
    "Country code",
    "Country name",
    "Year code",
    "Year name",
    "Value in internal dataset",
    "Value in public dataset",
    "Absolute difference between values",
    "Percent difference between values",
    "Flag for missing entries",
    "Flag for new entries",
    "Flag for large differences",
    "Flag for NA values",
    "Comparison status"
  )
)

data_dict %>%
  gt() %>%
  tab_header(
    title = "Data Dictionary",
    subtitle = "Description of fields in the comparison dataset"
  )
```

### Technical Details

```{r}
# Session information
sessionInfo()
```
