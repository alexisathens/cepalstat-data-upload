---
title: "01_download_olade"
format: html
editor: visual
---

This script downloads data from the OLADE website and saves the raw files at Pilot/Data/Raw/olade.

```{r}
library(tidyverse)
library(reticulate)

# Setup chunk for Quarto / R Markdown
knitr::opts_knit$set(root.dir = "C:/Users/aathens/OneDrive - United Nations/Documentos/CEPALSTAT Data Process/cepalstat-data-upload")

# Force use of known working path
use_python("C:/Users/aathens/AppData/Local/anaconda3/python.exe", required = TRUE)

# Double check config
py_config()
```

## Define functions
```{python}
def wait_for_olade_data_ready(page):
    """
    Waits for OLADE report data to finish loading by monitoring known loading messages.
    
    Parameters:
    - page: Playwright page object
    """

    # Wait for "Espere por favor..." to appear and disappear
    espere_locator = page.locator("text=Espere por favor...")
    espere_locator.wait_for(state="visible", timeout=10000)
    espere_locator.wait_for(state="hidden", timeout=60000)
    
    # Then wait for "Cargando..." to disappear (don't wait to appear since it's typically fast)
    cargando_locator = page.locator("text=Cargando...")
    cargando_locator.wait_for(state="hidden", timeout=30000)
```

```{python}
def select_report_fields(page, fila, columna, unidad):
    """
    Applies the three core filters: Fila, Columna, Unidad de medida.
    - fila_value: e.g. "Unidad de Información"
    - columna_value: e.g. "Energético"
    - unidad_value: e.g. "Unidad de origen"
    """
    # Fila
    page.click("#cbFila_I")
    page.wait_for_timeout(500)
    page.fill("#cbFila_I", fila)
    page.wait_for_timeout(500)
    page.keyboard.press("Enter")

    # Columna
    page.click("#cbColumna_I")
    page.wait_for_timeout(500)
    page.fill("#cbColumna_I", columna)
    page.wait_for_timeout(500)
    page.keyboard.press("Enter")

    # Unidad de medida
    page.click("#cbUnidad_I")
    page.wait_for_timeout(500)
    page.locator(f"text='{unidad}'").nth(0).click()
    page.wait_for_timeout(500)
    page.keyboard.press("Enter")

```

```{python}
import os
DOWNLOAD_DIR = "Data/Raw/olade"
```


## Set up Playwright session
```{python}
from playwright.sync_api import sync_playwright
p = sync_playwright().start()
browser = p.chromium.launch(headless=False)
context = browser.new_context(accept_downloads=True)
page = context.new_page()
```

## Navigate to OLADE website for data download
```{python}
url = "https://sielac.olade.org/WebForms/Reportes/ReporteOD.aspx?subsectorId=0&or=720&ss=2&v=1"
page.goto(url)
```

Test:
```{python}
# # Files: Select Unidad de Información
# page.click("#cbFila_I")
# page.wait_for_timeout(500)
# page.fill("#cbFila_I", "Unidad de Información")
# page.wait_for_timeout(500)
# page.keyboard.press("Enter")
# 
# # Columnas: Select Energético
# page.click("#cbColumna_I")
# page.wait_for_timeout(500)
# page.fill("#cbColumna_I", "Energético")
# page.wait_for_timeout(500)
# page.keyboard.press("Enter")
# 
# # Unidad de medida: Select "TEP"
# page.click("#cbUnidad_I")
# page.wait_for_timeout(500)
# page.locator("text='tep'").nth(0).click()
# page.wait_for_timeout(500)
# # page.keyboard.press("Enter")


```


## Select Filters & Download
```{python}
page.goto(url)

select_report_fields(
    page,
    fila="Unidad de Información",
    columna="Energético",
    unidad="10³ bep"
)

wait_for_olade_data_ready(page)

with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
    page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
download = download_info.value # Retrieves download object
download.save_as(os.path.join(DOWNLOAD_DIR, "01_unidad_energetico_bep.xlsx")) # Saves downloaded file with new name
```

```{python}
page.goto(url)

select_report_fields(
    page,
    fila="Unidad de Información",
    columna="Tiempo",
    unidad="Unidad de origen"
)

wait_for_olade_data_ready(page)

with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
    page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
download = download_info.value # Retrieves download object
download.save_as(os.path.join(DOWNLOAD_DIR, "02_unidad_tiempo_origen.xlsx")) # Saves downloaded file with new name
```

```{python}
page.goto(url)

select_report_fields(
    page,
    fila="Actividad",
    columna="Unidad de Información",
    unidad="tep"
)

wait_for_olade_data_ready(page)

with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
    page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
download = download_info.value # Retrieves download object
download.save_as(os.path.join(DOWNLOAD_DIR, "03_actividad_unidad_tep.xlsx")) # Saves downloaded file with new name
```

```{python}
page.goto(url)

select_report_fields(
    page,
    fila="Unidad de Información",
    columna="Energético",
    unidad="Unidad de origen"
)

wait_for_olade_data_ready(page)

with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
    page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
download = download_info.value # Retrieves download object
download.save_as(os.path.join(DOWNLOAD_DIR, "04_unidad_energetico_origen.xlsx")) # Saves downloaded file with new name
```

Ask Alberto what the filters for 4150 are supposed to be -
```{python}
# page.goto(url)
# 
# select_report_fields(
#     page,
#     fila="Unidad de Información",
#     columna="Energético",
#     unidad="Unidad de origen"
# )
# 
# wait_for_olade_data_ready(page)
# 
# with page.expect_download() as download_info: # Tells playwright to watch for a download and catch download_info when it begins
#     page.click("text=Descargar excel")  # Clicks element with visible text that's exactly "Descargar excel"
# download = download_info.value # Retrieves download object
# download.save_as(os.path.join(DOWNLOAD_DIR, "05_unidad_energetico_origen.xlsx")) # Saves downloaded file with new name
```

## Close browser

```{python}
browser.close()
p.stop()
```
